/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  StandardImpl2,
  StandardImpl2Interface,
} from "../../contracts/StandardImpl2";

const _abi = [
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initValue",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newValue",
        type: "uint256",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newValue",
        type: "uint256",
      },
    ],
    name: "subValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101f2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063158ef93e146100675780633fa4f2451461008957806355241077146100a0578063bd210e10146100b5578063fe4b84df146100c8578063ffa1ad74146100db575b600080fd5b6000546100749060ff1681565b60405190151581526020015b60405180910390f35b61009260015481565b604051908152602001610080565b6100b36100ae366004610161565b6100e3565b005b6100b36100c3366004610161565b6100f4565b6100b36100d6366004610161565b6100ff565b610092600281565b6100ee81600a610190565b60015550565b6100ee600a826101a9565b60005460ff161561014d5760405162461bcd60e51b81526020600482015260146024820152734f6e6c7920696e697469616c697a65206f6e636560601b604482015260640160405180910390fd5b60019081556000805460ff19169091179055565b60006020828403121561017357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156101a3576101a361017a565b92915050565b818103818111156101a3576101a361017a56fea26469706673582212207b11472b25c79fb94dae6442f388ca03c840f6555eedb724f9fbd319b3be98ad64736f6c63430008130033";

type StandardImpl2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StandardImpl2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StandardImpl2__factory extends ContractFactory {
  constructor(...args: StandardImpl2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StandardImpl2> {
    return super.deploy(overrides || {}) as Promise<StandardImpl2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StandardImpl2 {
    return super.attach(address) as StandardImpl2;
  }
  override connect(signer: Signer): StandardImpl2__factory {
    return super.connect(signer) as StandardImpl2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StandardImpl2Interface {
    return new utils.Interface(_abi) as StandardImpl2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StandardImpl2 {
    return new Contract(address, _abi, signerOrProvider) as StandardImpl2;
  }
}
